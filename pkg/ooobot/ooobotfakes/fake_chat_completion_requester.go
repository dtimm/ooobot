// Code generated by counterfeiter. DO NOT EDIT.
package ooobotfakes

import (
	"context"
	"sync"

	"github.com/dtimm/ooobot/pkg/ooobot"
	openai "github.com/sashabaranov/go-openai"
)

type FakeChatCompletionRequester struct {
	CreateChatCompletionStub        func(context.Context, openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)
	createChatCompletionMutex       sync.RWMutex
	createChatCompletionArgsForCall []struct {
		arg1 context.Context
		arg2 openai.ChatCompletionRequest
	}
	createChatCompletionReturns struct {
		result1 openai.ChatCompletionResponse
		result2 error
	}
	createChatCompletionReturnsOnCall map[int]struct {
		result1 openai.ChatCompletionResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChatCompletionRequester) CreateChatCompletion(arg1 context.Context, arg2 openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	fake.createChatCompletionMutex.Lock()
	ret, specificReturn := fake.createChatCompletionReturnsOnCall[len(fake.createChatCompletionArgsForCall)]
	fake.createChatCompletionArgsForCall = append(fake.createChatCompletionArgsForCall, struct {
		arg1 context.Context
		arg2 openai.ChatCompletionRequest
	}{arg1, arg2})
	stub := fake.CreateChatCompletionStub
	fakeReturns := fake.createChatCompletionReturns
	fake.recordInvocation("CreateChatCompletion", []interface{}{arg1, arg2})
	fake.createChatCompletionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChatCompletionRequester) CreateChatCompletionCallCount() int {
	fake.createChatCompletionMutex.RLock()
	defer fake.createChatCompletionMutex.RUnlock()
	return len(fake.createChatCompletionArgsForCall)
}

func (fake *FakeChatCompletionRequester) CreateChatCompletionCalls(stub func(context.Context, openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)) {
	fake.createChatCompletionMutex.Lock()
	defer fake.createChatCompletionMutex.Unlock()
	fake.CreateChatCompletionStub = stub
}

func (fake *FakeChatCompletionRequester) CreateChatCompletionArgsForCall(i int) (context.Context, openai.ChatCompletionRequest) {
	fake.createChatCompletionMutex.RLock()
	defer fake.createChatCompletionMutex.RUnlock()
	argsForCall := fake.createChatCompletionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeChatCompletionRequester) CreateChatCompletionReturns(result1 openai.ChatCompletionResponse, result2 error) {
	fake.createChatCompletionMutex.Lock()
	defer fake.createChatCompletionMutex.Unlock()
	fake.CreateChatCompletionStub = nil
	fake.createChatCompletionReturns = struct {
		result1 openai.ChatCompletionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeChatCompletionRequester) CreateChatCompletionReturnsOnCall(i int, result1 openai.ChatCompletionResponse, result2 error) {
	fake.createChatCompletionMutex.Lock()
	defer fake.createChatCompletionMutex.Unlock()
	fake.CreateChatCompletionStub = nil
	if fake.createChatCompletionReturnsOnCall == nil {
		fake.createChatCompletionReturnsOnCall = make(map[int]struct {
			result1 openai.ChatCompletionResponse
			result2 error
		})
	}
	fake.createChatCompletionReturnsOnCall[i] = struct {
		result1 openai.ChatCompletionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeChatCompletionRequester) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createChatCompletionMutex.RLock()
	defer fake.createChatCompletionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChatCompletionRequester) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ooobot.ChatCompletionRequester = new(FakeChatCompletionRequester)
